{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNWcei+igzTmZuYhsEdBWMC",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/PhaniSekharReddyAvuthu/It-Security-Lab-Programs-Python/blob/main/Python-Lab-Programs\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aZFnhd_mq-Cs",
        "outputId": "9db69174-8304-4cc5-82f6-ab71a7df6d66"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting PyCryptodome\n",
            "  Downloading pycryptodome-3.15.0-cp35-abi3-manylinux2010_x86_64.whl (2.3 MB)\n",
            "\u001b[K     |████████████████████████████████| 2.3 MB 5.1 MB/s \n",
            "\u001b[?25hInstalling collected packages: PyCryptodome\n",
            "Successfully installed PyCryptodome-3.15.0\n"
          ]
        }
      ],
      "source": [
        "!pip install PyCryptodome"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from Crypto.PublicKey import RSA\n",
        "# arguments are the name of private key and public key file name\n",
        "def generateKeys(privatekeyfile,publickeyfile):\n",
        " key = RSA.generate(2048)\n",
        " private_key = key.export_key()\n",
        " file_out = open(privatekeyfile, \"wb\")\n",
        " file_out.write(private_key)\n",
        " file_out.close()\n",
        " public_key = key.publickey().export_key()\n",
        " file_out = open(publickeyfile, \"wb\")\n",
        " file_out.write(public_key)\n",
        " file_out.close()\n",
        "\n",
        "generateKeys(\"private.pem\",\"public.pem\")"
      ],
      "metadata": {
        "id": "z0S4Zj__v0jQ"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from Crypto.PublicKey import RSA\n",
        "from Crypto.Random import get_random_bytes\n",
        "from Crypto.Cipher import AES, PKCS1_OAEP\n",
        "\n",
        "def RSAEncrypt(data,publickeyfile,encryptedfile):\n",
        " \n",
        " file_out = open(encryptedfile, \"wb\")\n",
        " recipient_key = RSA.import_key(open(publickeyfile).read())\n",
        " session_key = get_random_bytes(16)\n",
        " # Encrypt the session key with the public RSA key\n",
        " cipher_rsa = PKCS1_OAEP.new(recipient_key)\n",
        " enc_session_key = cipher_rsa.encrypt(session_key)\n",
        " # Encrypt the data with the AES session key\n",
        " cipher_aes = AES.new(session_key, AES.MODE_EAX)\n",
        " ciphertext, tag = cipher_aes.encrypt_and_digest(data)\n",
        " [ file_out.write(x) for x in (enc_session_key, cipher_aes.nonce, tag,ciphertext) ]\n",
        " file_out.close()\n",
        "\n",
        "\n",
        "#encrypt\n",
        "data = \"This is the message I want to transmit after encrypting with rsa\".encode(\"utf-8\")\n",
        "RSAEncrypt(data,\"public.pem\",\"encrypted_data.bin\")"
      ],
      "metadata": {
        "id": "5p0MNMR_zVan"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from Crypto.PublicKey import RSA\n",
        "from Crypto.Random import get_random_bytes\n",
        "from Crypto.Cipher import AES, PKCS1_OAEP\n",
        "\n",
        "def RSADecrypt(encrypted_data,privatekeyfile):\n",
        "\n",
        " file_in = open(encrypted_data, \"rb\")\n",
        " private_key = RSA.import_key(open(privatekeyfile).read())\n",
        " enc_session_key, nonce, tag, ciphertext = \\\n",
        " [ file_in.read(x) for x in (private_key.size_in_bytes(), 16, 16, -1) ]\n",
        " # Decrypt the session key with the private RSA key\n",
        " cipher_rsa = PKCS1_OAEP.new(private_key)\n",
        " session_key = cipher_rsa.decrypt(enc_session_key)\n",
        "\n",
        " # Decrypt the data with the AES session key\n",
        " cipher_aes = AES.new(session_key, AES.MODE_EAX, nonce)\n",
        " data = cipher_aes.decrypt_and_verify(ciphertext, tag)\n",
        " return data\n",
        " \n",
        " #decrypt\n",
        "databack = RSADecrypt(\"encrypted_data.bin\",\"private.pem\")\n",
        "print(databack.decode(\"utf-8\"))\n",
        " "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QAdVjB0nzjg1",
        "outputId": "02f46bda-15d7-4aa1-e32f-a22bce7ab6a0"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "This is the message I want to transmit after encrypting with rsa\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from Crypto.PublicKey import RSA\n",
        "# arguments are the name of private key and public key file name\n",
        "def generateKeys(privatekeyfile,publickeyfile):\n",
        " key = RSA.generate(2048)\n",
        " private_key = key.export_key()\n",
        " file_out = open(privatekeyfile, \"wb\")\n",
        " file_out.write(private_key)\n",
        " file_out.close()\n",
        " public_key = key.publickey().export_key()\n",
        " file_out = open(publickeyfile, \"wb\")\n",
        " file_out.write(public_key)\n",
        " file_out.close()\n",
        "\n",
        "generateKeys(\"private.pem\",\"public.pem\")"
      ],
      "metadata": {
        "id": "5ui5mi0kz31v"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from Crypto.PublicKey import RSA\n",
        "from Crypto.Random import get_random_bytes\n",
        "from Crypto.Cipher import AES, PKCS1_OAEP\n",
        "\n",
        "def RSAEncrypt(data,publickeyfile,encryptedfile):\n",
        " \n",
        " file_out = open(encryptedfile, \"wb\")\n",
        " recipient_key = RSA.import_key(open(publickeyfile).read())\n",
        " session_key = get_random_bytes(16)\n",
        " # Encrypt the session key with the public RSA key\n",
        " cipher_rsa = PKCS1_OAEP.new(recipient_key)\n",
        " enc_session_key = cipher_rsa.encrypt(session_key)\n",
        " # Encrypt the data with the AES session key\n",
        " cipher_aes = AES.new(session_key, AES.MODE_EAX)\n",
        " ciphertext, tag = cipher_aes.encrypt_and_digest(data)\n",
        " [ file_out.write(x) for x in (enc_session_key, cipher_aes.nonce, tag,ciphertext) ]\n",
        " file_out.close()\n",
        "\n",
        "\n",
        "#encrypt\n",
        "data = open(\"image.png\",\"rb\")\n",
        "data = data.read()\n",
        "RSAEncrypt(data,\"public.pem\",\"encrypted_data.bin\")"
      ],
      "metadata": {
        "id": "vi6oez1e0bCB"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from Crypto.PublicKey import RSA\n",
        "from Crypto.Random import get_random_bytes\n",
        "from Crypto.Cipher import AES, PKCS1_OAEP\n",
        "\n",
        "def RSADecrypt(encrypted_data,privatekeyfile):\n",
        "\n",
        " file_in = open(encrypted_data, \"rb\")\n",
        " private_key = RSA.import_key(open(privatekeyfile).read())\n",
        " enc_session_key, nonce, tag, ciphertext = \\\n",
        " [ file_in.read(x) for x in (private_key.size_in_bytes(), 16, 16, -1) ]\n",
        " # Decrypt the session key with the private RSA key\n",
        " cipher_rsa = PKCS1_OAEP.new(private_key)\n",
        " session_key = cipher_rsa.decrypt(enc_session_key)\n",
        "\n",
        " # Decrypt the data with the AES session key\n",
        " cipher_aes = AES.new(session_key, AES.MODE_EAX, nonce)\n",
        " data = cipher_aes.decrypt_and_verify(ciphertext, tag)\n",
        " f = open(\"image.jpg\",\"wb\")\n",
        " f.write(data)\n",
        " f.close()\n",
        " return data\n",
        " \n",
        " #decrypt\n",
        "RSADecrypt(\"encrypted_data.bin\",\"private.pem\")\n",
        " "
      ],
      "metadata": {
        "id": "tv5SUnJz0oB-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from Crypto.PublicKey import RSA\n",
        "\n",
        "keyPair = RSA.generate(bits=1024)\n",
        "\n",
        "# RSA sign the message\n",
        "msg = b'A message for signing'\n",
        "from hashlib import sha512\n",
        "hash = int.from_bytes(sha512(msg).digest(), byteorder='big')\n",
        "signature = pow(hash, keyPair.d, keyPair.n)\n",
        "\n",
        "\n",
        "# RSA verify signature\n",
        "msg = b'A message for signingg'\n",
        "hash = int.from_bytes(sha512(msg).digest(), byteorder='big')\n",
        "hashFromSignature = pow(signature, keyPair.e, keyPair.n)\n",
        "print(\"Signature valid:\", hash == hashFromSignature)\n",
        "\n",
        "\n",
        "# RSA verify signature (tampered msg)\n",
        "msg = b'A message for signing (tampered)'\n",
        "hash = int.from_bytes(sha512(msg).digest(), byteorder='big')\n",
        "hashFromSignature = pow(signature, keyPair.e, keyPair.n)\n",
        "print(\"Signature valid (tampered):\", hash == hashFromSignature)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0oNcrD0E1CHD",
        "outputId": "cb6a9b92-61eb-4d6f-928e-282087f86393"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Signature valid: False\n",
            "Signature valid (tampered): False\n"
          ]
        }
      ]
    }
  ]
}